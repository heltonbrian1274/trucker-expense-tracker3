// FIXED iOS Subscription Verification Function
// This replaces the problematic handleDirectSubscriptionVerification function

async function handleDirectSubscriptionVerification(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
        showNotification('Please enter a valid email address', 'error');
        return;
    }

    showNotification('Verifying subscription...', 'info');

    try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 30000);

        const response = await fetch('/api/verify-and-activate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ email }),
            signal: controller.signal
        });

        clearTimeout(timeoutId);

        let data;
        try {
            data = await response.json();
        } catch (parseError) {
            throw new Error('Invalid response from server');
        }

        if (response.ok && data.success) {
            safeLocalStorageSet('subscriptionToken', data.token);
            safeLocalStorageSet('isSubscribed', 'true');
            isSubscribed = true;

            showNotification('ðŸŽ‰ Pro subscription activated successfully!', 'success');
            updateTrialCountdownWithAlreadySubscribed();

            // âœ… FIXED iOS HANDLING - Simplified and Safe
            if (isIOSDevice()) {
                // Simple approach: Just reload the page after a short delay
                // No aggressive cache clearing, no service worker messages
                setTimeout(() => {
                    window.location.reload();
                }, 2000); // Slightly longer delay for iOS
            } else {
                // Desktop: Standard reload
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            }

        } else {
            const errorMessage = data?.message || 'Failed to verify subscription';
            showNotification(errorMessage, 'error');
        }

    } catch (error) {
        let errorMessage = 'Failed to verify subscription. Please try again.';

        if (error.name === 'AbortError') {
            errorMessage = 'Request timed out. Please check your connection and try again.';
        } else if (error.name === 'TypeError' && error.message.includes('fetch')) {
            errorMessage = 'Network error: Unable to connect to server. Check your connection.';
        } else if (error.name === 'SyntaxError') {
            errorMessage = 'Server response error: Invalid data received.';
        } else if (error.message) {
            errorMessage = `Error: ${error.message}`;
        }

        showNotification(errorMessage, 'error');
    }
}

// âœ… ALTERNATIVE: Even Safer iOS Approach (Optional)
// If the simple reload still causes issues, use this version:

async function handleDirectSubscriptionVerificationSafer(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
        showNotification('Please enter a valid email address', 'error');
        return;
    }

    showNotification('Verifying subscription...', 'info');

    try {
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 30000);

        const response = await fetch('/api/verify-and-activate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ email }),
            signal: controller.signal
        });

        clearTimeout(timeoutId);

        let data;
        try {
            data = await response.json();
        } catch (parseError) {
            throw new Error('Invalid response from server');
        }

        if (response.ok && data.success) {
            safeLocalStorageSet('subscriptionToken', data.token);
            safeLocalStorageSet('isSubscribed', 'true');
            isSubscribed = true;

            showNotification('ðŸŽ‰ Pro subscription activated successfully!', 'success');
            
            // Update UI immediately without reload
            updateTrialCountdownWithAlreadySubscribed();
            manageSubscriptionButtons();
            
            if (isIOSDevice()) {
                // For iOS: Show success message and ask user to refresh manually
                setTimeout(() => {
                    showNotification('Subscription activated! Please refresh the page to see all features.', 'success');
                }, 2000);
            } else {
                // Desktop: Standard reload
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            }

        } else {
            const errorMessage = data?.message || 'Failed to verify subscription';
            showNotification(errorMessage, 'error');
        }

    } catch (error) {
        let errorMessage = 'Failed to verify subscription. Please try again.';

        if (error.name === 'AbortError') {
            errorMessage = 'Request timed out. Please check your connection and try again.';
        } else if (error.name === 'TypeError' && error.message.includes('fetch')) {
            errorMessage = 'Network error: Unable to connect to server. Check your connection.';
        } else if (error.name === 'SyntaxError') {
            errorMessage = 'Server response error: Invalid data received.';
        } else if (error.message) {
            errorMessage = `Error: ${error.message}`;
        }

        showNotification(errorMessage, 'error');
    }
}

